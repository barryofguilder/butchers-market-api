AWSTemplateFormatVersion: 2010-09-09
Description: Butcher Market API CloudFormation template for Fargate.

Parameters:
  # Service Specific
  PathPatternUrl:
    Type: String
    Default: /api*
  PathPriority:
    Type: Number
    Default: 10
  # UploadsBucket:
  #   Type: String
  DbHost:
    Type: String
  DbUser:
    Type: String
  DbPass:
    Type: String
  DbName:
    Type: String
  TokenUser:
    Type: String
  TokenPass:
    Type: String
  TokenSecret:
    Type: String
  FeedbackEmailFrom:
    Type: String
  FeedbackEmailTo:
    Type: String
  FeedbackEmailSubject:
    Type: String
    Default: "Butcher Contact"
  RecaptchaKey:
    Type: String

  # Normal Service Junk
  VPC:
    Type: AWS::EC2::VPC::Id
  SubnetA:
    Type: AWS::EC2::Subnet::Id
  SubnetB:
    Type: AWS::EC2::Subnet::Id
  SecurityGroup:
    Type: String
  ServiceName:
    Type: String
    Default: butcher-api
  ContainerPort:
    Type: Number
    Default: 3000
  HealthCheckPath:
    Type: String
    Default: /api/status
  HostedZoneName:
    Type: String
  MinContainers:
    Type: Number
    Default: 1
  MaxContainers:
    Type: Number
    Default: 2
  AutoScalingTargetValue:
    Type: Number
    Default: 75
  LoadBalancerArn:
    Type: String
  # ListenerArn:
  #   Type: String
  Image:
    Type: String
  RetentionInDays:
    Type: Number
    Default: 90
  CpuSize:
    Type: String
    Default: 512
  MemorySize:
    Type: String
    Default: 1GB
  AwsRegion:
    Type: String
  ScaleInCooldown:
    Type: Number
    Default: 10
  ScaleOutCooldown:
    Type: Number
    Default: 10
  MinimumHealthyPercent:
    Type: Number
    Default: 100
  MaximumPercent:
    Type: Number
    Default: 200
  HealthCheckGracePeriodSeconds:
    Type: Number
    Default: 60
  HealthCheckIntervalSeconds:
    Type: Number
    Default: 30
  HealthCheckTimeoutSeconds:
    Type: Number
    Default: 5
  UnhealthyThresholdCount:
    Type: Number
    Default: 2
  HealthyThresholdCount:
    Type: Number
    Default: 2
  DeregistrationDelayTimeoutSeconds:
    Type: Number
    Default: 60

Resources:
  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref ServiceName

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      # Name of the task definition. Subsequent versions of the task definition are grouped together under this name.
      Family: !Sub "${ServiceName}-td"
      # awsvpc is required for Fargate
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: !Ref CpuSize
      Memory: !Ref MemorySize
      ExecutionRoleArn: !Ref ExecutionRole
      # TODO: Uncomment this out when the TaskRole has been uncommented
      # TaskRoleArn: !Ref TaskRole
      # "The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role that grants containers in the task permission to call AWS APIs on your behalf."
      ContainerDefinitions:
        - Name: !Ref ServiceName
          Image: !Ref Image
          PortMappings:
            - ContainerPort: !Ref ContainerPort
          Environment:
            - Name: "AWS_REGION"
              Value: !Ref AwsRegion
            - Name: "NODE_ENVIRONMENT"
              Value: production
            - Name: "PORT"
              Value: !Ref ContainerPort
            - Name: "DB_HOST"
              Value: !Ref DbHost
            - Name: "DB_USER"
              Value: !Ref DbUser
            - Name: "DB_PASS"
              Value: !Ref DbPass
            - Name: "DB_NAME"
              Value: !Ref DbName
            - Name: "TOKEN_USERNAME"
              Value: !Ref TokenUser
            - Name: "TOKEN_PASSWORD"
              Value: !Ref TokenPass
            - Name: "TOKEN_SECRET"
              Value: !Ref TokenSecret
            - Name: "FEEDBACK_EMAIL_FROM"
              Value: !Ref FeedbackEmailFrom
            - Name: "FEEDBACK_EMAIL_TO"
              Value: !Ref FeedbackEmailTo
            - Name: "FEEDBACK_EMAIL_SUBJECT"
              Value: !Ref FeedbackEmailSubject
            - Name: "RECAPTCHA_KEY"
              Value: !Ref RecaptchaKey
            #UPLOAD_DIR: "../uploads",
          # Send logs to CloudWatch Logs
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: ecs

  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ServiceName}ExecutionRole"
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"

  # TaskRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     RoleName: !Sub "${ServiceName}TaskRole"
  #     AssumeRolePolicyDocument:
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service: ecs-tasks.amazonaws.com
  #           Action: "sts:AssumeRole"
  #     Policies:
  #       -
  #         PolicyName: !Sub "${ServiceName}S3-Policy"
  #         PolicyDocument:
  #           Version: "2012-10-17"
  #           Statement:
  #             -
  #               Effect: "Allow"
  #               Action:
  #                 - 's3:ListBucket'
  #                 - 's3:GetObject'
  #                 - 's3:PutObject'
  #               Resource:
  #                 - !Sub "arn:aws:s3:::${UploadsBucket}*"

  AutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ServiceName}AutoScalingRole"
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole"

  Service:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Ref ServiceName
      Cluster: !Ref Cluster
      TaskDefinition: !Ref TaskDefinition
      DeploymentConfiguration:
        MinimumHealthyPercent: !Ref MinimumHealthyPercent
        MaximumPercent: !Ref MaximumPercent
      DesiredCount: 2
      # This may need to be adjusted if the container takes a while to start up
      HealthCheckGracePeriodSeconds: !Ref HealthCheckGracePeriodSeconds
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          # change to DISABLED if you're using private subnets that have access to a NAT gateway
          # AssignPublicIp: DISABLED
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref SubnetA
            - !Ref SubnetB
          SecurityGroups:
            - !Ref SecurityGroup
      LoadBalancers:
        - ContainerName: !Ref ServiceName
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref TargetGroup

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: !Ref HealthCheckIntervalSeconds
      # will look for a 200 status code by default unless specified otherwise
      HealthCheckPath: !Ref HealthCheckPath
      HealthCheckTimeoutSeconds: !Ref HealthCheckTimeoutSeconds
      UnhealthyThresholdCount: !Ref UnhealthyThresholdCount
      HealthyThresholdCount: !Ref HealthyThresholdCount
      Name: !Sub "${ServiceName}-tg"
      Port: !Ref ContainerPort
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: !Ref DeregistrationDelayTimeoutSeconds # default is 300
      TargetType: ip
      VpcId: !Ref VPC
      Tags:
        - Value: ButcherMarket
          Key: App

  # LoadBalancer:
  #   Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
  #   Properties:
  #     IpAddressType: ipv4
  #     Scheme: internet-facing
  #     Subnets:
  #       - !Ref SubnetA
  #       - !Ref SubnetB

  # TODO: This should be HTTPS in the future once it's setup
  Listener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref LoadBalancerArn
      Port: '8000'
      Protocol: HTTP

  ListenerRule0:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          Order: 1
          TargetGroupArn: !Ref TargetGroup
      ListenerArn: !Ref Listener
      Conditions:
        - Field: path-pattern
          Values:
            - !Ref PathPatternUrl
        # - Field: host-header
        #   Values:
        #     - !Ref HostedZoneName
      Priority: !Ref PathPriority

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/butcher/${ServiceName}"
      RetentionInDays: !Ref RetentionInDays

  AutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: !Ref MinContainers
      MaxCapacity: !Ref MaxContainers
      ResourceId: !Sub "service/${Cluster}/${Service.Name}"
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      # "The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role that allows Application Auto Scaling to modify your scalable target."
      RoleARN: !GetAtt AutoScalingRole.Arn

  AutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub "${ServiceName}AutoScalingPolicy"
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: !Ref ScaleInCooldown
        ScaleOutCooldown: !Ref ScaleOutCooldown
        # Keep things at or lower than 50% CPU utilization, for example
        TargetValue: !Ref AutoScalingTargetValue

Outputs:
  Endpoint:
    Description: Endpoint
    Value: !Sub "https://${HostedZoneName}"
